interface general {
    record context {
        height: u64,
        timestamp: u64,
    }

    type json = string;

    // type hash = list<u8>;
    // type key-elem = hash;
    type key-elem = string;
    variant node-key {
        account-asset(tuple<key-elem, key-elem>),
    }
    variant fuzzy-node-key {
        account-asset(tuple<option<key-elem>, option<key-elem>>),
    }

    resource host-key-elem {
        constructor(wit: key-elem);
        as-wit: func() -> key-elem;
    }
}

interface read {
    use general.{fuzzy-node-key};

    type read-set = list<read-entry>;

    record read-entry {
        key: fuzzy-node-key,
        value: node-value-read,
    }

    variant node-value-read {
        account-asset,
    }

    resource host-read-set {
        constructor(wit: read-set);
        as-wit: func() -> read-set;
    }
}

interface view {
    use general.{node-key};

    type view-set = list<view-entry>;

    record view-entry {
        key: node-key,
        value: node-value-view,
    }

    variant node-value-view {
        account-asset(account-asset-v),
    }

    record account-asset-v {
        balance: u32,
    }

    resource host-view-set {
        constructor(wit: view-set);
        as-wit: func() -> view-set;
    }
}

interface write {
    use general.{node-key};

    type write-set = list<write-entry>;

    record write-entry {
        key: node-key,
        value: node-value-write,
    }

    variant node-value-write {
        account-asset(account-asset-w),
    }

    variant account-asset-w {
        send(u32),
        receive(u32),
    }

    resource host-write-set {
        constructor(wit: write-set);
        as-wit: func() -> write-set;
    }
}

world common {
    export general;
    export read;
    export view;
    export write;
}
