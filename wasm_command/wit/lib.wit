package crate:lib;

world lib {
    // type hash = list<u8>;
    // type key-elem = hash;
    type key-elem = string;
    variant node-key {
        account-asset(tuple<key-elem, key-elem>),
    }
    variant fuzzy-node-key {
        account-asset(tuple<option<key-elem>, option<key-elem>>),
    }
    variant node-value-read {
        account-asset,
    }
    variant node-value-view {
        account-asset(account-asset-v),
    }
    variant node-value-write {
        account-asset(account-asset-w),
    }
    record account-asset-v {
        balance: u32,
    }
    variant account-asset-w {
        send(u32),
        receive(u32),
    }

    record read-entry {
        key: fuzzy-node-key,
        value: node-value-read,
    }
    record view-entry {
        key: node-key,
        value: node-value-view,
    }
    record write-entry {
        key: node-key,
        value: node-value-write,
    }

    type read-set = list<read-entry>;
    type state-view = list<view-entry>;
    type write-set = list<write-entry>;

    record context {}

    type json = string;

    export read-request: func(ctx: context, args: json) -> read-set;
    export write-request: func(view: state-view, args: json) -> write-set;
}
